Программы должны уметь выполнять разные действия в зависимости от введенных данных. Для принятия решения программа проверяет, истинно или ложно определенное условие. В Python существует несколько способов проверки, и в каждом случае возможны два исхода: истина (True) или ложь (False). Проверка условий и принятие решений по результатам этой проверки называется ветвлением (branching). Программа таким способом выбирает, по какой из возможных ветвей ей двигаться дальше. В Python проверка условия осуществляется при помощи ключевого слова if.

Двоеточие (:) в конце строки с инструкцией if сообщает интерпретатору Python, что дальше находится блок команд. В блок команд входят все строки с отступом под строкой с инструкцией if, вплоть до следующей строки без отступа. Если условие истинно, выполняется весь расположенный ниже блок. В предыдущем примере блок инструкций составляет третья и четвёртая строки программы. Блоком кода называют объединённые друг с другом строки. Они всегда связаны с определённой частью программы (например, с инструкцией if). В Python блоки кода формируются при помощи отступов.

В новой программе мы обрабатываем сразу два случая:

если условие истинно (пользователь ввел «Python»), и если условие ложно (пользователь ввел что угодно, кроме «Python»).
"Отступы" Отступ — небольшое смещение строки кода вправо. В начале такой строки находятся пробелы, и поэтому она на несколько символов отстоит от левого края. По соглашению PEP 8, для отступа блоков кода используются 4 пробела.

"Операторы сравнения" Можно заметить, что в проверке условия мы использовали двойное равенство (==), вместо ожидаемого одиночного (=). Не стоит путать оператор присваивания (=) с условным оператором (==). Для проверки двух элементов на равенство Python использует удвоенный знак равно (==).

В Python существует 6 основных операторов сравнения.

"Цепочки сравнений" Операторы сравнения в Python можно объединять в цепочки (в отличии от большинства других языков программирования, где для этого нужно использовать логические связки), например, a == b == c или 1 <= x <= 10.

Следующий код проверяет, находится ли значение переменной age в диапазоне от 3 до 6: age = int(input()) if 3 <= age <= 6: print('Вы ребёнок')

Код, проверяющий равенство трех переменных, может выглядеть так: if a == b == c: print('числа равны') else: print('числа не равны')

"Транзитивность" Операция равенства является транзитивной. Это означает, что если a == b и b == c, то из этого следует, что a == c. Именно поэтому предыдущий код, проверяющий равенство трёх переменных, работает как полагается. Из курса математики вам могут быть знакомы другие примеры транзитивных операций: Отношение порядка если a>b и b>c, то a>c Парллельность прямых: если a||b и b||c, то a||c Делимость: если a/b и b/c, то a/c.

Наглядно транзитивность отношения порядка можно понять на таком примере: если сосед слева старше вас (a>b), а вы старше соседа справа (b>c), то сосед слева точно старше соседа справа (a>c). Операция неравенства (!=), в отличие от операции равенства (==), является нетранзитивной. То есть из того, что a != b и b != c,вовсе не следует, что a != c. Действительно, если вас зовут не так, как соседа слева и не так, как соседа справа, то нет гарантии, что у обоих соседей не окажутся одинаковые имена.
